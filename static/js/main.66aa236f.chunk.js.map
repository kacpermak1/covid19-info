{"version":3,"sources":["Components/Select.js","Components/Actions/index.js","Components/Poland.js","Components/GB.js","Components/States.js","Components/Italy.js","Components/Stats.js","App.js","serviceWorker.js","Components/Reducers/deathsReducer.js","Components/Reducers/confirmedReducer.js","Components/Reducers/countriesReducer.js","Components/Reducers/index.js","index.js"],"names":["axios","require","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","connect","state","data","countriesReducer","countries","dispatch","loadSelectedDeaths","type","payload","loadSelectedConfirmed","selectedCountryName","props","classes","React","useState","country","setCountry","fetchData","countryCode","get","then","res","confirmed","value","deaths","catch","error","console","log","FormControl","className","Select","onChange","event","target","displayEmpty","MenuItem","disabled","Object","entries","map","i","code","key","FormHelperText","root","maxWidth","width","borderRadius","media","height","paddingTop","border","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","deathsReducer","cases","confirmedReducer","Card","CardHeader","action","IconButton","aria-label","title","subheader","CardMedia","image","CardContent","Typography","color","component","style","fontWeight","britain","states","italy","Stats","britainCases","globalDeaths","globalCases","statesDeaths","statesCases","italyDeaths","italyCases","allCountries","updateComponent","onMount","fetchCountries","setState","err","stateDeathsName","stateCasesName","response","this","setInterval","prevProps","prevState","loadDeaths","loadConfirmed","loadBritainDeaths","loadBritainConfirmed","loadGlobalDeaths","loadGlobalConfirmed","loadStatesDeaths","loadStatesConfirmed","loadItalyDeaths","loadItalyConfirmed","loadCountries","selectedName","align","variant","selectedCases","selectedDeaths","Component","selected","selectedCountry","App","Boolean","window","location","hostname","match","initState","usa","global","reducers","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.66aa236f.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport { connect } from \"react-redux\";\nimport Select from '@material-ui/core/Select';\nimport {loadSelectedConfirmed, loadSelectedDeaths, selectedCountryName} from './Actions';\n\nconst axios = require('axios');\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nfunction SimpleSelect(props) {\n  const classes = useStyles();\n\n  const [country, setCountry] = React.useState('');\n\n  const handleChange = event => {\n    setCountry(event.target.value);\n    fetchData(event.target.value);\n    props.selectedCountryName(event.target.value);\n  };\n\n  const dispatchBoth = (confirmed, deaths) => {\n    props.loadSelectedConfirmed(confirmed);\n    props.loadSelectedDeaths(deaths);\n  }\n\n  const fetchData = (countryCode) => {\n    axios\n      .get(`https://covid19.mathdro.id/api/countries/${countryCode}`)\n      .then(res => dispatchBoth(res.data.confirmed.value, res.data.deaths.value))\n      .catch(error => console.log(\"error: \" + error));\n  };\n\nif(!props.data){return <p>...loading</p>}else{\n  return (\n    <div>\n      <FormControl className={classes.formControl}>\n        <Select value={country} onChange={handleChange} displayEmpty className={classes.selectEmpty}>\n          <MenuItem value=\"\" disabled>\n            Country\n          </MenuItem>\n  {Object.entries(props.data).map(([country, code],i) => <MenuItem value={code} key={i}>{country}</MenuItem>)}\n        </Select>\n        <FormHelperText>Select country to get information</FormHelperText>\n      </FormControl>\n    </div>\n  )}\n}\n\nconst mapStateToProps = state => {\n    return {\n      data: state.countriesReducer.countries\n    };\n  };\n\n  const mapDispatchToProps = dispatch => {\n    return {\n      loadSelectedDeaths: data => {\n        dispatch(loadSelectedDeaths(data));\n      },\n      loadSelectedConfirmed: data => {\n        dispatch(loadSelectedConfirmed(data))\n      },\n      selectedCountryName: data => {\n        dispatch(selectedCountryName(data))\n      }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimpleSelect);\n\n","export const loadDeaths = (data) => {\n    return {\n        type: \"DEATHS\",\n        payload: data\n    }\n}\n\nexport const loadBritainDeaths = (data) => {\n    return {\n        type: \"DEATHS_BRITAIN\",\n        payload: data\n    }\n}\n\nexport const loadGlobalDeaths = (data) => {\n    return {\n        type: \"DEATHS_GLOBAL\",\n        payload: data\n    }\n}\n\nexport const loadStatesDeaths = (data) => {\n    return {\n        type: \"DEATHS_STATES\",\n        payload: data\n    }\n}\n\nexport const loadItalyDeaths = (data) => {\n    return {\n        type: \"DEATHS_ITALY\",\n        payload: data\n    }\n}\n\nexport const loadSelectedDeaths = (data) => {\n    return {\n        type: \"DEATHS_SELECTED\",\n        payload: data\n    }\n}\n\nexport const loadConfirmed = (data) => {\n    return {\n        type: \"CONFIRMED\",\n        payload: data\n    }\n}\n\nexport const loadBritainConfirmed = (data) => {\n    return {\n        type: \"CONFIRMED_BRITAIN\",\n        payload: data\n    }\n}\n\nexport const loadGlobalConfirmed = (data) => {\n    return {\n        type: \"CONFIRMED_GLOBAL\",\n        payload: data\n    }\n}\nexport const loadStatesConfirmed = (data) => {\n    return {\n        type: \"CONFIRMED_STATES\",\n        payload: data\n    }\n}\n\nexport const loadItalyConfirmed = (data) => {\n    return {\n        type: \"CONFIRMED_ITALY\",\n        payload: data\n    }\n}\n\nexport const loadSelectedConfirmed = (data) => {\n    return {\n        type: \"CONFIRMED_SELECTED\",\n        payload: data\n    }\n}\n\nexport const loadCountries = (data) => {\n    return {\n        type: \"LOAD_COUNTRIES\",\n        payload: data\n    }\n}\n\nexport const selectedCountryName = (data) => {\n    return {\n        type: 'SELECTED_COUNTRY_NAME',\n        payload: data\n    }\n}\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport { connect } from 'react-redux';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 345,\n    width:300,\n    margin:15,\n    borderRadius:5\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n    border: '1px solid #d3d3d3'\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n}));\n\nconst Poland = (props) => {\n  const classes = useStyles();\n\n  return (\n      <div className=\"card-div\">\n    <Card className={classes.root}>\n      <CardHeader\n        action={\n          <IconButton aria-label=\"settings\">\n          </IconButton>\n        }\n        title=\"Poland\"\n        subheader=''\n      />\n      <CardMedia\n        className={classes.media}\n        image=\"./assets/poland.jpg\"\n        title=\"Poland\"\n      />\n      <CardContent>\n        <Typography color=\"textPrimary\" component=\"h2\">\n          Confirmed cases: <span style={{fontWeight:\"600\"}}>{props.cases? props.cases : ''}</span>\n        </Typography>\n        <Typography color=\"textPrimary\" component=\"h2\">\n          Deaths: <span style={{fontWeight:\"600\"}}>{props.deaths ? props.deaths: '' }</span>\n        </Typography>\n      </CardContent>\n    </Card>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        deaths: state.deathsReducer.deaths,\n        cases: state.confirmedReducer.confirmed,\n    }\n}\n\nexport default connect(mapStateToProps, {})(Poland);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport { connect } from 'react-redux';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 345,\n    width:300,\n    margin:15,\n    borderRadius:5\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n    border: '1px solid #d3d3d3'\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n}));\n\nconst GB = (props) => {\n  const classes = useStyles();\n\n  return (\n      <div className=\"card-div\">\n    <Card className={classes.root}>\n      <CardHeader\n        action={\n          <IconButton aria-label=\"settings\">\n          </IconButton>\n        }\n        title=\"United Kingdom\"\n        subheader=''\n      />\n      <CardMedia\n        className={classes.media}\n        image=\"./assets/gb.jpg\"\n        title=\"United Kingdom\"\n      />\n      <CardContent>\n        <Typography color=\"textPrimary\" component=\"h2\">\n          Confirmed cases: <span style={{fontWeight:\"600\"}}>{props.cases ? props.cases : ''}</span> \n        </Typography>\n        <Typography color=\"textPrimary\" component=\"h2\">\n          Deaths: <span style={{fontWeight:\"600\"}}>{props.britain ? props.britain : '' }</span> \n        </Typography>\n      </CardContent>\n    </Card>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        britain: state.deathsReducer.britain,\n        cases: state.confirmedReducer.britain,\n    }\n}\n\nexport default connect(mapStateToProps, {})(GB);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport { connect } from 'react-redux';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 345,\n    width:300,\n    margin:15,\n    borderRadius:5\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n    border: '1px solid #d3d3d3'\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n}));\n\nconst States = (props) => {\n  const classes = useStyles();\n\n  return (\n      <div className=\"card-div\">\n    <Card className={classes.root}>\n      <CardHeader\n        action={\n          <IconButton aria-label=\"settings\">\n          </IconButton>\n        }\n        title=\"United States\"\n        subheader=''\n      />\n      <CardMedia\n        className={classes.media}\n        image=\"./assets/states.jpg\"\n        title=\"United States\"\n      />\n      <CardContent>\n        <Typography color=\"textPrimary\" component=\"h2\">\n          Confirmed cases: <span style={{fontWeight:\"600\"}}>{props.cases ? props.cases : ''}</span>\n        </Typography>\n        <Typography color=\"textPrimary\" component=\"h2\">\n          Deaths: <span style={{fontWeight:\"600\"}}>{props.deaths ? props.deaths : ''}</span>\n        </Typography>\n      </CardContent>\n    </Card>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        deaths: state.deathsReducer.states,\n        cases: state.confirmedReducer.states,\n    }\n}\n\nexport default connect(mapStateToProps, {})(States);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport { connect } from 'react-redux';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 345,\n    width:300,\n    margin:15,\n    borderRadius:5\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n    border: '1px solid #d3d3d3'\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n}));\n\nconst Italy = (props) => {\n  const classes = useStyles();\n\n  return (\n      <div className=\"card-div\">\n    <Card className={classes.root}>\n      <CardHeader\n        action={\n          <IconButton aria-label=\"settings\">\n          </IconButton>\n        }\n        title=\"Italy\"\n        subheader=''\n      />\n      <CardMedia\n        className={classes.media}\n        image=\"./assets/italy.jpg\"\n        title=\"Italy\"\n      />\n      <CardContent>\n        <Typography color=\"textPrimary\" component=\"h2\">\n          Confirmed cases: <span style={{fontWeight:\"600\"}}>{props.cases ? props.cases : ''}</span>\n        </Typography>\n        <Typography color=\"textPrimary\" component=\"h2\">\n          Deaths: <span style={{fontWeight:\"600\"}}>{props.deaths ? props.deaths : ''}</span>\n        </Typography>\n      </CardContent>\n    </Card>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        deaths: state.deathsReducer.italy,\n        cases: state.confirmedReducer.italy,\n    }\n}\n\nexport default connect(mapStateToProps, {})(Italy);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"./Select\";\nimport Poland from \"./Poland\";\nimport GB from \"./GB\";\nimport States from \"./States\";\nimport Italy from \"./Italy\";\nimport {\n  loadDeaths,\n  loadConfirmed,\n  loadBritainDeaths,\n  loadBritainConfirmed,\n  loadGlobalDeaths,\n  loadGlobalConfirmed,\n  loadStatesDeaths,\n  loadStatesConfirmed,\n  loadItalyDeaths,\n  loadItalyConfirmed,\n  loadCountries\n} from \"./Actions\";\nconst axios = require(\"axios\");\n\nclass Stats extends Component {\n  state = {\n    deaths: 0,\n    cases: 0,\n    britain: 0,\n    britainCases: 0,\n    globalDeaths: 0,\n    globalCases: 0,\n    statesDeaths: 0,\n    statesCases: 0,\n    italyDeaths: 0,\n    italyCases: 0,\n    allCountries: {},\n    updateComponent:false\n  };\n\n  componentDidMount() {\n    this.onMount();\n      setInterval(() => {\n        this.onMount();\n      },120000);\n  }\n\n  onMount = () => {\n    this.fetchData(\"\", \"globalDeaths\", \"globalCases\");\n    this.fetchData(\"countries/PL\", \"deaths\", \"cases\");\n    this.fetchData(\"countries/GB\", \"britain\", \"britainCases\");\n    this.fetchData(\"countries/US\", \"statesDeaths\", \"statesCases\");\n    this.fetchData(\"countries/IT\", \"italyDeaths\", \"italyCases\");\n    this.fetchCountries();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.deaths !== this.state.deaths) {\n      this.props.loadDeaths(this.state.deaths);\n      this.props.loadConfirmed(this.state.cases);\n    }\n    if (prevState.britain !== this.state.britain) {\n      this.props.loadBritainDeaths(this.state.britain);\n      this.props.loadBritainConfirmed(this.state.britainCases);\n    }\n    if (prevState.globalDeaths !== this.state.globalDeaths) {\n      this.props.loadGlobalDeaths(this.state.globalDeaths);\n      this.props.loadGlobalConfirmed(this.state.globalCases);\n    }\n    if (prevState.statesDeaths !== this.state.statesDeaths) {\n      this.props.loadStatesDeaths(this.state.statesDeaths);\n      this.props.loadStatesConfirmed(this.state.statesCases);\n    }\n    if (prevState.italyDeaths !== this.state.italyDeaths) {\n      this.props.loadItalyDeaths(this.state.italyDeaths);\n      this.props.loadItalyConfirmed(this.state.italyCases);\n    }\n    if (prevState.allCountries !== this.state.allCountries) {\n      this.props.loadCountries(this.state.allCountries.countries);\n    }\n    if (prevProps.selectedName !== this.props.selectedName) {\n        this.setState({updateComponent:!this.state.updateComponent});\n      }\n  }\n\n  fetchCountries = () => {\n    axios(`https://covid19.mathdro.id/api/countries`)\n      .then(res => this.setState({ allCountries: res.data }))\n      .catch(err => console.log(err, \"something went wrong\"));\n  };\n\n  fetchData = (countryCode, stateDeathsName, stateCasesName) => {\n    axios\n      .get(`https://covid19.mathdro.id/api/${countryCode}`)\n      .then(response =>\n        this.setState({\n          [stateDeathsName]: response.data.deaths.value,\n          [stateCasesName]: response.data.confirmed.value\n        })\n      )\n      .catch(error => console.log(\"error: \" + error));\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"header-top\">\n          <Typography align=\"center\" color=\"textPrimary\" variant=\"h2\">\n            COVID-19 INFO\n          </Typography>\n        </div>\n        <div className=\"cards-list\">\n          <Italy />\n          <Poland />\n          <GB />\n          <States />\n        </div>\n        <div className=\"select\">\n          <Select />{this.props.selectedName !== '' ?\n          <div className=\"selected-info\">\n            <Typography color=\"textPrimary\" component=\"h2\">\n              Confirmed cases:{\" \"}\n              <span style={{ fontWeight: \"600\" }}>\n                {this.props.selectedCases}\n              </span>\n            </Typography>\n            <Typography color=\"textPrimary\" component=\"h2\">\n              Deaths:{\" \"}\n              <span style={{ fontWeight: \"600\" }}>\n                {this.props.selectedDeaths}\n              </span>\n            </Typography>\n          </div> : ''}\n        </div>\n        <div className=\"bottom-global\">\n          <Typography\n            align=\"center\"\n            spacing=\"5\"\n            color=\"textPrimary\"\n            variant=\"h4\"\n          >\n            Coronavirus Cases: {this.state.globalCases}\n          </Typography>\n          <Typography align=\"center\" color=\"textPrimary\" variant=\"h4\">\n            Deaths: {this.state.globalDeaths}\n          </Typography>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    data: state.deathsReducer.deaths,\n    selectedDeaths: state.deathsReducer.selected,\n    selectedCases: state.confirmedReducer.selected,\n    selectedName: state.countriesReducer.selectedCountry\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    loadDeaths: data => {\n      dispatch(loadDeaths(data));\n    },\n    loadConfirmed: data => {\n      dispatch(loadConfirmed(data));\n    },\n    loadBritainDeaths: data => {\n      dispatch(loadBritainDeaths(data));\n    },\n    loadBritainConfirmed: data => {\n      dispatch(loadBritainConfirmed(data));\n    },\n    loadGlobalDeaths: data => {\n      dispatch(loadGlobalDeaths(data));\n    },\n    loadGlobalConfirmed: data => {\n      dispatch(loadGlobalConfirmed(data));\n    },\n    loadStatesDeaths: data => {\n      dispatch(loadStatesDeaths(data));\n    },\n    loadStatesConfirmed: data => {\n      dispatch(loadStatesConfirmed(data));\n    },\n    loadItalyDeaths: data => {\n      dispatch(loadItalyDeaths(data));\n    },\n    loadItalyConfirmed: data => {\n      dispatch(loadItalyConfirmed(data));\n    },\n    loadCountries: data => {\n      dispatch(loadCountries(data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Stats);\n","import React from 'react';\nimport Stats from './Components/Stats';\nimport './App.css';\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <Stats/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n\n    deaths:0,\n    britain:0,\n    usa:0,\n    italy:0,\n    global:0,\n    states:0,\n    selected:0\n \n }\n \n const deathsReducer = (state = initState, action) => {\n \n    if (action.type === 'DEATHS') {\n        return {\n            ...state,\n            deaths: action.payload,\n        }\n    }\n    \n    if (action.type === 'DEATHS_BRITAIN'){\n        return {\n            ...state,\n            britain: action.payload,\n        }\n    }\n\n    if (action.type === 'DEATHS_GLOBAL') {\n        return {\n            ...state,\n            global: action.payload,\n        }\n    }\n\n    if (action.type === 'DEATHS_STATES') {\n        return {\n            ...state,\n            states: action.payload,\n        }\n    }\n\n    if (action.type === 'DEATHS_ITALY') {\n        return {\n            ...state,\n            italy: action.payload,\n        }\n    }\n\n    if (action.type === 'DEATHS_SELECTED') {\n        return {\n            ...state,\n            selected: action.payload,\n        }\n    }\n    return state\n \n }\n \n export default deathsReducer;","const initState = {\n\n    confirmed:0,\n    britain:0,\n    usa:0,\n    italy:0,\n    global:0,\n    states:0,\n    selected:0\n \n }\n \n const confirmedReducer = (state = initState, action) => {\n \n    if (action.type === 'CONFIRMED') {\n        return {\n            ...state,\n            confirmed: action.payload,\n        }\n    }\n\n    if (action.type === 'CONFIRMED_BRITAIN'){\n        return {\n            ...state,\n            britain: action.payload,\n        }\n    }\n\n    if (action.type === 'CONFIRMED_GLOBAL'){\n        return {\n            ...state,\n            global: action.payload,\n        }\n    }\n\n    if (action.type === 'CONFIRMED_STATES'){\n        return {\n            ...state,\n            states: action.payload,\n        }\n    }\n\n    if (action.type === 'CONFIRMED_ITALY'){\n        return {\n            ...state,\n            italy: action.payload,\n        }\n    }\n\n    if (action.type === 'CONFIRMED_SELECTED'){\n        return {\n            ...state,\n            selected: action.payload,\n        }\n    }\n    return state\n \n }\n \n export default confirmedReducer;","const initState = {\n\n   countries:[],\n   selectedCountry:''\n \n }\n \n const countriesReducer = (state = initState, action) => {\n \n    if (action.type === 'LOAD_COUNTRIES') {\n        return {\n            ...state,\n            countries: action.payload,\n        }\n    }\n\n    if (action.type === 'SELECTED_COUNTRY_NAME') {\n        return {\n            ...state,\n            selectedCountry: action.payload,\n        }\n    }\n\n    return state\n \n }\n \n export default countriesReducer;","import { combineReducers } from 'redux';\nimport deathsReducer from './deathsReducer';\nimport confirmedReducer from './confirmedReducer';\nimport countriesReducer from './countriesReducer';\n\n\nconst reducers = combineReducers({deathsReducer, confirmedReducer, countriesReducer})\n\nexport default reducers;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport reducers from \"./Components/Reducers\";\n\nconst store = createStore(\n  reducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}